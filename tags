!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLUE	includes/Colors.hpp	7;"	d
CXX	Makefile	/^CXX = c++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -Wextra -Werror -MMD -g -std=c++98$/;"	m
CYAN	includes/Colors.hpp	9;"	d
Channel	Channel.cpp	/^Channel::Channel() : _channelName(""), _channelPassword(""), _topic("")$/;"	f	class:Channel
Channel	Channel.cpp	/^Channel::Channel(const Channel &src) : _channelName(src._channelName), _channelPassword(src._channelPassword), _connectedClients(src._connectedClients), _connectedOperators(src._connectedOperators), _topic(src._topic)$/;"	f	class:Channel
Channel	Channel.cpp	/^Channel::Channel(std::string channelName, std::string channelPassword) : _channelName(channelName), _channelPassword(channelPassword), _topic("")$/;"	f	class:Channel
Channel	includes/Channel.hpp	/^class Channel$/;"	c
Client	Client.cpp	/^Client::Client() : _clientFd(-1), _clientReadBuffer(""), _clientSendBuffer(""), _nickname(""), _oldNickname(""), _username(""), _hostname(""), _enteredServerPassword(false), _hasRegistered(false), _timeoutStart(0)$/;"	f	class:Client
Client	Client.cpp	/^Client::Client(const Client &src) : _clientFd(src._clientFd), _clientReadBuffer(src._clientReadBuffer), _clientSendBuffer(src._clientSendBuffer), _nickname(src._nickname), _oldNickname(src._oldNickname), _username(src._username), _hostname(src._hostname), _enteredServerPassword(src._enteredServerPassword), _hasRegistered(src._hasRegistered), _timeoutStart(src._timeoutStart), _clientChannels(src._clientChannels)$/;"	f	class:Client
Client	includes/Client.hpp	/^class Client$/;"	c
ClientDisconnect	includes/Server.hpp	/^        class ClientDisconnect : public std::exception$/;"	c	class:Server
DEBUG	includes/Server.hpp	29;"	d
DEFAULT_PASSWORD	includes/Server.hpp	34;"	d
DEFAULT_PORT	includes/Server.hpp	33;"	d
DEPS	Makefile	/^DEPS = $(SRCS:.cpp=.d)$/;"	m
ERROR_MSG	includes/Responses.hpp	5;"	d
ERR_ALREADYREGISTRED	includes/Responses.hpp	23;"	d
ERR_BADCHANNELKEY	includes/Responses.hpp	37;"	d
ERR_ERRONEUSNICKNAME	includes/Responses.hpp	11;"	d
ERR_NEEDMOREPARAMS	includes/Responses.hpp	24;"	d
ERR_NICKNAMEINUSE	includes/Responses.hpp	12;"	d
ERR_NONICKNAMEGIVEN	includes/Responses.hpp	10;"	d
ERR_NOSUCHCHANNEL	includes/Responses.hpp	7;"	d
ERR_NOSUCHSERVER	includes/Responses.hpp	20;"	d
ERR_NOTREGISTERED	includes/Responses.hpp	26;"	d
ERR_PASSWDMISMATCH	includes/Responses.hpp	16;"	d
ERR_UNKNOWNCOMMAND	includes/Responses.hpp	25;"	d
FULL	includes/Random.hpp	/^    FULL = 2$/;"	e	enum:__anon1
GREEN	includes/Colors.hpp	5;"	d
LIGHT	includes/Random.hpp	/^    LIGHT = 1,$/;"	e	enum:__anon1
ListenServerError	includes/Server.hpp	/^        class ListenServerError: public std::exception$/;"	c	class:Server
NAME	Makefile	/^NAME = ircserv$/;"	m
NICK_MAXLEN	includes/Server.hpp	36;"	d
OFF	includes/Random.hpp	/^    OFF = 0,$/;"	e	enum:__anon1
PURPLE	includes/Colors.hpp	8;"	d
PollError	includes/Server.hpp	/^        class PollError : public std::exception$/;"	c	class:Server
RED	includes/Colors.hpp	4;"	d
REGISTER_TIMEOUT	includes/Server.hpp	37;"	d
RESET	includes/Colors.hpp	3;"	d
RPL_CREATED	includes/Responses.hpp	33;"	d
RPL_ENDOFNAMES	includes/Responses.hpp	41;"	d
RPL_NAMREPLY	includes/Responses.hpp	40;"	d
RPL_NOTOPIC	includes/Responses.hpp	38;"	d
RPL_TOPIC	includes/Responses.hpp	39;"	d
RPL_WELCOME	includes/Responses.hpp	31;"	d
RPL_YOURHOST	includes/Responses.hpp	32;"	d
SERVER_IP	includes/Server.hpp	32;"	d
SRCS	Makefile	/^SRCS = main.cpp Server.cpp Channel.cpp Client.cpp commands\/pass.cpp commands\/nick.cpp commands\/user.cpp commands\/ping.cpp commands\/join.cpp commands\/join_parsing.cpp commands\/cap.cpp$/;"	m
SRCS_OBJS	Makefile	/^SRCS_OBJS = $(SRCS:.cpp=.o)$/;"	m
Server	Server.cpp	/^Server::Server(const Server &src): _serverPort(src._serverPort), _serverPassword(src._serverPassword), _serverSocket(src._serverSocket), _serverAddress(src._serverAddress), _allSockets(src._allSockets), _allClients(src._allClients), _Channels(src._Channels)$/;"	f	class:Server
Server	Server.cpp	/^Server::Server(int port, std::string password): _serverPort(port), _serverPassword(password), _serverSocket(-1)$/;"	f	class:Server
Server	Server.cpp	/^Server::Server(void): _serverPort(DEFAULT_PORT), _serverPassword(DEFAULT_PASSWORD), _serverSocket(-1)$/;"	f	class:Server
Server	includes/Server.hpp	/^class Server$/;"	c
SocketBindError	includes/Server.hpp	/^        class SocketBindError : public std::exception$/;"	c	class:Server
SocketCreationError	includes/Server.hpp	/^        class SocketCreationError : public std::exception$/;"	c	class:Server
YELLOW	includes/Colors.hpp	6;"	d
_Channels	includes/Server.hpp	/^        std::vector<Channel *>     _Channels;$/;"	m	class:Server
_allClients	includes/Server.hpp	/^        std::vector<Client *>      _allClients;$/;"	m	class:Server
_allSockets	includes/Server.hpp	/^        std::vector<pollfd>        _allSockets;$/;"	m	class:Server
_channelName	includes/Channel.hpp	/^        std::string             _channelName;$/;"	m	class:Channel
_channelPassword	includes/Channel.hpp	/^        std::string             _channelPassword;$/;"	m	class:Channel
_clientChannels	includes/Client.hpp	/^        std::vector<Channel *>  _clientChannels;$/;"	m	class:Client
_clientFd	includes/Client.hpp	/^        int                     _clientFd;$/;"	m	class:Client
_clientReadBuffer	includes/Client.hpp	/^        std::string             _clientReadBuffer;$/;"	m	class:Client
_clientSendBuffer	includes/Client.hpp	/^        std::string             _clientSendBuffer;$/;"	m	class:Client
_connectedClients	includes/Channel.hpp	/^        std::vector<Client *>   _connectedClients;$/;"	m	class:Channel
_connectedOperators	includes/Channel.hpp	/^        std::vector<Client *>   _connectedOperators;$/;"	m	class:Channel
_enteredServerPassword	includes/Client.hpp	/^        bool                    _enteredServerPassword;$/;"	m	class:Client
_hasRegistered	includes/Client.hpp	/^        bool                    _hasRegistered;$/;"	m	class:Client
_hostname	includes/Client.hpp	/^        std::string             _hostname;$/;"	m	class:Client
_nickname	includes/Client.hpp	/^        std::string             _nickname;$/;"	m	class:Client
_oldNickname	includes/Client.hpp	/^        std::string             _oldNickname;$/;"	m	class:Client
_serverAddress	includes/Server.hpp	/^        sockaddr_in                _serverAddress;$/;"	m	class:Server
_serverPassword	includes/Server.hpp	/^        std::string                _serverPassword;$/;"	m	class:Server
_serverPort	includes/Server.hpp	/^        long                        _serverPort;$/;"	m	class:Server
_serverSocket	includes/Server.hpp	/^        int                        _serverSocket;$/;"	m	class:Server
_stopSignal	Server.cpp	/^bool Server::_stopSignal = false;$/;"	m	class:Server	file:
_stopSignal	includes/Server.hpp	/^        static bool                _stopSignal;$/;"	m	class:Server
_timeoutStart	includes/Client.hpp	/^        time_t                  _timeoutStart;$/;"	m	class:Client
_topic	includes/Channel.hpp	/^        std::string             _topic;$/;"	m	class:Channel
_username	includes/Client.hpp	/^        std::string             _username;$/;"	m	class:Client
acceptNewClient	Server.cpp	/^void Server::acceptNewClient(void)$/;"	f	class:Server
addChannel	Server.cpp	/^void Server::addChannel(Channel *newChannel)$/;"	f	class:Server
addClient	Channel.cpp	/^void Channel::addClient(Client *client)$/;"	f	class:Channel
addOperator	Channel.cpp	/^void Channel::addOperator(Client *client)$/;"	f	class:Channel
addToClientSendBuffer	Client.cpp	/^void Client::addToClientSendBuffer(std::string &string)$/;"	f	class:Client
addtoClientReadBuffer	Client.cpp	/^void Client::addtoClientReadBuffer(std::string &string)  \/\/ Ajoute string au _clientBuffer;$/;"	f	class:Client
bindServerSocket	Server.cpp	/^void Server::bindServerSocket(void)$/;"	f	class:Server
channelExist	Server.cpp	/^bool Server::channelExist(std::string name)$/;"	f	class:Server
checkChannelsNamesValid	commands/join.cpp	/^void checkChannelsNamesValid(Server &server, Client *client, std::vector<std::pair<std::string, std::string> > &namesAndPasswords)$/;"	f
checkClientRegisterTimeouts	Server.cpp	/^void Server::checkClientRegisterTimeouts(void)$/;"	f	class:Server
checkClientSendBuffer	Server.cpp	/^void Server::checkClientSendBuffer(int idx)$/;"	f	class:Server
checkPassword	main.cpp	/^std::string checkPassword(const char* passStr)$/;"	f
checkPort	main.cpp	/^long checkPort(const char* portStr)$/;"	f
closeAllFds	Server.cpp	/^void Server::closeAllFds(void)$/;"	f	class:Server
createIpv4Address	Server.cpp	/^void Server::createIpv4Address(const char *ip, int port)$/;"	f	class:Server
createServerSocket	Server.cpp	/^void Server::createServerSocket(void)$/;"	f	class:Server
debug	includes/Random.hpp	/^} debug;$/;"	t	typeref:enum:__anon1
deleteAllChannels	Server.cpp	/^void Server::deleteAllChannels(void)$/;"	f	class:Server
deleteAllClients	Server.cpp	/^void Server::deleteAllClients(void)$/;"	f	class:Server
deleteClient	Server.cpp	/^void Server::deleteClient(int fd_toClear)$/;"	f	class:Server
exec_CAP	commands/cap.cpp	/^void exec_CAP(Server &server, std::vector<std::string> &arguments, int clientFd)$/;"	f
exec_JOIN	commands/join.cpp	/^void           exec_JOIN(Server &server, std::string &ogString, std::vector<std::string> &arguments, int clientFd)$/;"	f
exec_NICK	commands/nick.cpp	/^void exec_NICK(Server &server, std::vector<std::string> &arguments, int clientFd)$/;"	f
exec_PASS	commands/pass.cpp	/^void   exec_PASS(Server &server, std::vector<std::string> &arguments, int clientFd)$/;"	f
exec_PING	commands/ping.cpp	/^void exec_PING(Server &server, std::vector<std::string> &arguments, int clientFd)$/;"	f
exec_USER	commands/user.cpp	/^void exec_USER(Server &server, std::vector<std::string> &arguments, int clientFd)$/;"	f
executeCommand	Server.cpp	/^void Server::executeCommand(std::string &ogString, std::string &commandName, std::vector<std::string> &arguments, int clientFd)$/;"	f	class:Server
getActiveOperatorsVector	Channel.cpp	/^std::vector<Client *>& Channel::getActiveOperatorsVector(void)$/;"	f	class:Channel
getActiveUsers	Client.cpp	/^static std::string getActiveUsers(Channel *channel)$/;"	f	file:
getActiveUsersVector	Channel.cpp	/^std::vector<Client *>& Channel::getActiveUsersVector(void)$/;"	f	class:Channel
getChannel	Server.cpp	/^Channel* Server::getChannel(std::string channelName)$/;"	f	class:Server
getChannelName	Channel.cpp	/^std::string Channel::getChannelName(void)$/;"	f	class:Channel
getChannelPassword	Channel.cpp	/^std::string Channel::getChannelPassword(void)$/;"	f	class:Channel
getChannelTopic	Channel.cpp	/^std::string Channel::getChannelTopic(void)$/;"	f	class:Channel
getClientPoll	Server.cpp	/^pollfd* Server::getClientPoll(int clientFd)$/;"	f	class:Server
getClientReadBuffer	Client.cpp	/^std::string& Client::getClientReadBuffer(void) \/\/ Retourne le _clientBuffer;$/;"	f	class:Client
getClientSendBuffer	Client.cpp	/^std::string& Client::getClientSendBuffer(void)$/;"	f	class:Client
getClientStruct	Server.cpp	/^Client* Server::getClientStruct(int clientFd)$/;"	f	class:Server
getFd	Client.cpp	/^int Client::getFd(void)$/;"	f	class:Client
getHostname	Client.cpp	/^std::string Client::getHostname(void)$/;"	f	class:Client
getNickname	Client.cpp	/^std::string Client::getNickname(void)$/;"	f	class:Client
getOldNickname	Client.cpp	/^std::string Client::getOldNickname(void)$/;"	f	class:Client
getServerPassword	Server.cpp	/^std::string Server::getServerPassword(void)$/;"	f	class:Server
getServerSocket	Server.cpp	/^int Server::getServerSocket(void)$/;"	f	class:Server
getTimeoutStart	Client.cpp	/^time_t Client::getTimeoutStart(void)$/;"	f	class:Client
getUsername	Client.cpp	/^std::string Client::getUsername(void)$/;"	f	class:Client
getVectorClient	Server.cpp	/^std::vector<Client *>&    Server::getVectorClient(void)$/;"	f	class:Server
handleCommand	Server.cpp	/^void Server::handleCommand(std::string &command, int clientFd)$/;"	f	class:Server
handleMessage	Server.cpp	/^void Server::handleMessage(char *buffer, int clientFd)$/;"	f	class:Server
hasEnteredServerPassword	Client.cpp	/^bool Client::hasEnteredServerPassword(void)$/;"	f	class:Client
hasRegistered	Client.cpp	/^bool Client::hasRegistered(void)$/;"	f	class:Client
isRegistrationComplete	Server.cpp	/^void Server::isRegistrationComplete(Client *client)$/;"	f	class:Server
isUserOperator	Channel.cpp	/^bool Channel::isUserOperator(Client *client)$/;"	f	class:Channel
isValidNickname	commands/nick.cpp	/^static bool isValidNickname(std::string nickname)$/;"	f	file:
joinChannel	Client.cpp	/^void Client::joinChannel(Server &server, Channel *channel, std::string channelPassword)$/;"	f	class:Client
joinChannels	commands/join.cpp	/^static void    joinChannels(Server &server, std::vector<std::pair<std::string, std::string> > &namesAndPasswords, Client *client)$/;"	f	file:
leaveAllChannels	Client.cpp	/^void Client::leaveAllChannels()$/;"	f	class:Client
leaveChannel	Client.cpp	/^void Client::leaveChannel(Channel *channel)$/;"	f	class:Client
listenPort	Server.cpp	/^void Server::listenPort(void)$/;"	f	class:Server
main	main.cpp	/^int main(int ac, char **av)$/;"	f
operator =	Channel.cpp	/^Channel& Channel::operator=(const Channel &rhs)$/;"	f	class:Channel
operator =	Client.cpp	/^Client& Client::operator=(const Client &rhs)$/;"	f	class:Client
operator =	Server.cpp	/^Server& Server::operator=(const Server &rhs)$/;"	f	class:Server
pairNamesPasswords	commands/join_parsing.cpp	/^std::vector<std::pair<std::string, std::string> >  pairNamesPasswords(std::vector<std::string> &namesVector, std::vector<std::string> &passwordsVector)$/;"	f
parseInput	commands/join_parsing.cpp	/^std::vector<std::pair<std::string, std::string> >  parseInput(Server &server, Client *client, std::string &input)$/;"	f
printAllUsers	Server.cpp	/^void Server::printAllUsers(void)$/;"	f	class:Server
printInfoBanner	main.cpp	/^void printInfoBanner(const Server &server)$/;"	f
printOperators	Channel.cpp	/^void Channel::printOperators(void)$/;"	f	class:Channel
printUsers	Channel.cpp	/^void Channel::printUsers(void)$/;"	f	class:Channel
quitClient	Channel.cpp	/^void Channel::quitClient(Client *client)$/;"	f	class:Channel
quitOperator	Channel.cpp	/^void Channel::quitOperator(Client *client)$/;"	f	class:Channel
readClient	Server.cpp	/^void Server::readClient(int idx)$/;"	f	class:Server
sendToClient	Server.cpp	/^void Server::sendToClient(std::string &message, int clientFd)$/;"	f	class:Server
sendTopic	Client.cpp	/^static void sendTopic(Server &server, Client *client, Channel *channel)$/;"	f	file:
serverInit	Server.cpp	/^void Server::serverInit(void)$/;"	f	class:Server
setFd	Client.cpp	/^void Client::setFd(int fd)$/;"	f	class:Client
setHostname	Client.cpp	/^void Client::setHostname(std::string hostname)$/;"	f	class:Client
setNickname	Client.cpp	/^void Client::setNickname(std::string nickname)$/;"	f	class:Client
setRegistered	Client.cpp	/^void Client::setRegistered(bool value)$/;"	f	class:Client
setServerPassword	Client.cpp	/^void Client::setServerPassword(bool value)$/;"	f	class:Client
setTimeoutStart	Client.cpp	/^void Client::setTimeoutStart(time_t start)$/;"	f	class:Client
setUsername	Client.cpp	/^void Client::setUsername(std::string username)$/;"	f	class:Client
signalHandler	Server.cpp	/^void Server::signalHandler(int signum)$/;"	f	class:Server
splitChannelsAndPasswords	commands/join_parsing.cpp	/^void splitChannelsAndPasswords(std::string &input, std::string &channels, std::string &passwords)$/;"	f
splitString	commands/join_parsing.cpp	/^std::vector<std::string> splitString(std::string &channels)$/;"	f
startServerRoutine	Server.cpp	/^void Server::startServerRoutine(void)$/;"	f	class:Server
trimString	commands/join_parsing.cpp	/^void   trimString(std::string &str, const char *charset)$/;"	f
validChannelName	commands/join.cpp	/^static bool validChannelName(std::string &name)$/;"	f	file:
what	Server.cpp	/^const char* Server::ClientDisconnect::what(void) const throw()$/;"	f	class:Server::ClientDisconnect
what	Server.cpp	/^const char* Server::ListenServerError::what(void) const throw()$/;"	f	class:Server::ListenServerError
what	Server.cpp	/^const char* Server::PollError::what(void) const throw()$/;"	f	class:Server::PollError
what	Server.cpp	/^const char* Server::SocketBindError::what(void) const throw()$/;"	f	class:Server::SocketBindError
what	Server.cpp	/^const char* Server::SocketCreationError::what(void) const throw()$/;"	f	class:Server::SocketCreationError
~Channel	Channel.cpp	/^Channel::~Channel(){};$/;"	f	class:Channel
~Client	Client.cpp	/^Client::~Client(){};$/;"	f	class:Client
~Server	Server.cpp	/^Server::~Server(void)$/;"	f	class:Server
