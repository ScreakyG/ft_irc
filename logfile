diff --git a/Channel.cpp b/Channel.cpp
index a9d7693..d63f0ad 100644
--- a/Channel.cpp
+++ b/Channel.cpp
@@ -66,14 +66,12 @@ std::vector<Client *>& Channel::getActiveOperatorsVector(void)
 
 void Channel::addClient(Client *client)
 {
-    Client *newClient = new Client(*client);
-   this->_connectedClients.push_back(newClient);
+   this->_connectedClients.push_back(client);
 }
 
 void Channel::quitClient(Client *client)
 {
     std::vector<Client *>::iterator it;
-    Client *clientToFree = NULL;
 
     for (it = _connectedClients.begin(); it != _connectedClients.end(); it++)
     {
@@ -81,9 +79,7 @@ void Channel::quitClient(Client *client)
         {
             if (this->isUserOperator(client) == true)
                 this->quitOperator(client);
-            clientToFree = *it;
             _connectedClients.erase(it);
-            delete clientToFree;
             return ;
         }
     }
@@ -115,10 +111,7 @@ bool Channel::isUserOperator(Client *client)
     for (it = _connectedOperators.begin(); it != _connectedOperators.end(); it++)
     {
         if (client->getFd() == (*it)->getFd())
-        {
-            //std::cout << client->getFd() << " | " << (*it)->getFd() << std::endl;
             return (true);
-        }
     }
     return (false);
 }
diff --git a/Client.cpp b/Client.cpp
index 8c7a1a4..1951020 100644
--- a/Client.cpp
+++ b/Client.cpp
@@ -174,22 +174,20 @@ void Client::joinChannel(Server &server, Channel *channel, std::string channelPa
 
         message = RPL_ENDOFNAMES(this->getNickname(), channel->getChannelName());
         server.sendToClient(message, this->getFd());
-
-        // Envoyer les NAMRPLY avec tout les noms des utilisateurs.
-        //std::cout << "Client joined channel : " << channel.getChannelName() << " | password = " << channel.getChannelPassword() << std::endl;
     }
 }
 
-void Client::leaveChannel(Channel &channel)
+void Client::leaveChannel(Channel *channel)
 {
     std::vector<Channel *>::iterator  it;
 
     for (it = _clientChannels.begin(); it != _clientChannels.end(); it++)
     {
-        if (channel.getChannelName() == (*it)->getChannelName())
+        if (channel->getChannelName() == (*it)->getChannelName())
         {
             (*it)->quitClient(this);
             _clientChannels.erase(it);
+            return ;
         }
     }
 }
@@ -198,6 +196,7 @@ void Client::leaveAllChannels()
 {
     for (size_t idx = 0; idx < _clientChannels.size(); idx++)
         _clientChannels[idx]->quitClient(this);
+    _clientChannels.clear();
 }
 
 static std::string getActiveUsers(Channel *channel)
diff --git a/Server.cpp b/Server.cpp
index a2f1fb2..bb39aea 100644
--- a/Server.cpp
+++ b/Server.cpp
@@ -214,7 +214,7 @@ void Server::acceptNewClient(void)
 {
     // Penser a parse les infos de connexions style IP du client.
     pollfd      newClientPoll;
-    Client      newClientStruct;
+    Client      *newClientStruct = NULL;
     int         newClientFd;
     sockaddr_in clientAdress;
     socklen_t   addr_len = sizeof(clientAdress);
@@ -240,18 +240,26 @@ void Server::acceptNewClient(void)
         newClientPoll.events = POLLIN | POLLOUT; // Rajouter POLLOUT Ulterieurement pour egalement surveiller si la socket est prete a recevoir. Peut etre utile dans le cas de CTRL + Z.
         newClientPoll.revents = 0;
 
-        newClientStruct.setFd(newClientFd);
-
-        timeoutStart = time(NULL);
-        newClientStruct.setTimeoutStart(timeoutStart);
+        newClientStruct = new Client();
+        if (newClientStruct != NULL)
+        {
+            newClientStruct->setFd(newClientFd);
+            timeoutStart = time(NULL);
+            newClientStruct->setTimeoutStart(timeoutStart);
 
-        getsockname(newClientFd, reinterpret_cast<sockaddr*>(&clientAdress), &addr_len);
-        newClientStruct.setHostname(inet_ntoa(clientAdress.sin_addr));
+            getsockname(newClientFd, reinterpret_cast<sockaddr*>(&clientAdress), &addr_len);
+            newClientStruct->setHostname(inet_ntoa(clientAdress.sin_addr));
 
-        this->_allSockets.push_back(newClientPoll);
-        this->_allClients.push_back(newClientStruct);
+            this->_allSockets.push_back(newClientPoll);
+            this->_allClients.push_back(newClientStruct);
 
-        std::cout << GREEN << "[Server] New client connected on fd : " << newClientFd << RESET << std::endl;
+            std::cout << GREEN << "[Server] New client connected on fd : " << newClientFd << RESET << std::endl;
+        }
+        else
+        {
+            close(newClientFd);
+            std::cout << "[Server] allocate memory for client" << std::endl;
+        }
     }
 }
 
@@ -412,20 +420,20 @@ void Server::checkClientRegisterTimeouts(void)
 
     for (size_t i = 0; i < _allClients.size(); i++)
     {
-        if (_allClients[i].hasRegistered() == false)
+        if (_allClients[i]->hasRegistered() == false)
         {
-            if (difftime(time(NULL), _allClients[i].getTimeoutStart()) > REGISTER_TIMEOUT)
+            if (difftime(time(NULL), _allClients[i]->getTimeoutStart()) > REGISTER_TIMEOUT)
             {
                 try
                 {
                     message = ERROR_MSG(std::string("Registration timeout, PASS, NICK or USER might be incorrect"));
-                    sendToClient(message, _allClients[i].getFd()); // sendToClient peut throw en cas de probleme majeur alors on catch pour eviter un segfault.
-                    deleteClient(_allClients[i].getFd());
+                    sendToClient(message, _allClients[i]->getFd()); // sendToClient peut throw en cas de probleme majeur alors on catch pour eviter un segfault.
+                    deleteClient(_allClients[i]->getFd());
                 }
                 catch(Server::ClientDisconnect &e)
                 {
                     std::cout << e.what() << std::endl;
-                    deleteClient(_allClients[i].getFd());
+                    deleteClient(_allClients[i]->getFd());
                 }
             }
         }
@@ -436,8 +444,8 @@ Client* Server::getClientStruct(int clientFd)
 {
     for (size_t i = 0; i < this->_allClients.size(); i++)
     {
-        if (this->_allClients[i].getFd() == clientFd)
-            return (&this->_allClients[i]);
+        if (this->_allClients[i]->getFd() == clientFd)
+            return (this->_allClients[i]);
     }
     return (NULL); //En theorie cela ne devrai jamais arriver.
 }
@@ -452,7 +460,7 @@ pollfd* Server::getClientPoll(int clientFd)
     return (NULL);
 }
 
-std::vector<Client>&    Server::getVectorClient(void)
+std::vector<Client *>&    Server::getVectorClient(void)
 {
     return (this->_allClients);
 }
@@ -487,9 +495,13 @@ void Server::deleteClient(int fd_toClear)
 
     for (size_t i = 0; i < this->_allClients.size(); i++) // Remove it from the '_Client allClient';
     {
-        if (this->_allClients[i].getFd() == fd_toClear)
+        if (this->_allClients[i]->getFd() == fd_toClear)
         {
+            Client *clientToClear = NULL;
+
+            clientToClear = this->_allClients[i];
             this->_allClients.erase(this->_allClients.begin() + i);
+            delete clientToClear;
             break ;
         }
     }
@@ -497,14 +509,34 @@ void Server::deleteClient(int fd_toClear)
      std::cout << "Disconnecting socket : [" << fd_toClear  << "]" << std::endl;
 }
 
+void Server::deleteAllClients(void)
+{
+    if (_allClients.size() > 0)
+    {
+        for (size_t i = 0; i < _allClients.size();)
+        deleteClient(_allClients[i]->getFd());
+    }
+    _allClients.clear();
+}
+
 void Server::closeAllFds(void)
 {
     for (size_t i = 0; i < this->_allSockets.size(); i++)
     {
-        if (this->_allSockets[i].fd != this->_serverSocket)
-            std::cout << "Disconnecting socket : [" << this->_allSockets[i].fd  << "]" << std::endl;
-        close(this->_allSockets[i].fd);
+        if (this->_allSockets[i].fd == this->_serverSocket)
+        {
+            std::cout << "Deleting server socket" << std::endl;
+            close(this->_allSockets[i].fd);
+        }
     }
+    _allSockets.clear();
+
+    // for (size_t i = 0; i < this->_allSockets.size(); i++)
+    // {
+    //     if (this->_allSockets[i].fd != this->_serverSocket)
+    //         std::cout << "Disconnecting socket : [" << this->_allSockets[i].fd  << "]" << std::endl;
+    //     close(this->_allSockets[i].fd);
+    // }
 }
 
 void Server::sendToClient(std::string &message, int clientFd)
@@ -584,25 +616,25 @@ Channel* Server::getChannel(std::string channelName)
 
 void Server::printAllUsers(void)
 {
-   std::vector<Client>::iterator    it;
+   std::vector<Client *>::iterator    it;
 
    for (it = _allClients.begin(); it != _allClients.end(); it++)
    {
-        std::cout << "[Server] Nickname : " <<  it->getNickname() << " | ";
-        std::cout << "fd : " << it->getFd();
+        std::cout << "[Server] Nickname : " <<  (*it)->getNickname() << " | ";
+        std::cout << "fd : " << (*it)->getFd();
         std::cout << std::endl;
    }
 }
 
-void Server::deleteChannels(void)
+void Server::deleteAllChannels(void)
 {
     std::vector<Channel *>::iterator    it;
 
     for (it = _Channels.begin(); it != _Channels.end(); it++)
     {
+        (*it)->getActiveOperatorsVector().clear();
+        (*it)->getActiveUsersVector().clear();
         delete(*it);
-        it = _Channels.erase(it);
-        
     }
     _Channels.clear();
 }
diff --git a/commands/join.cpp b/commands/join.cpp
index 1cd0fb3..fc4c155 100644
--- a/commands/join.cpp
+++ b/commands/join.cpp
@@ -20,20 +20,21 @@ static void    joinChannels(Server &server, std::vector<std::pair<std::string, s
             Channel *channelToJoin = server.getChannel(channelName);
 
             if (channelToJoin != NULL)
-            {
                client->joinChannel(server, channelToJoin, channelPassword);
-            }
             else
-                std::cout << "Unexpected error when joingning a Channel" << std::endl;
+                std::cout << "[Server] " << "[" << client->getFd() << "] " << "Unexpected error when joingning a Channel" << std::endl;
         }
         else
         {
             //Creer le channel.
             Channel *newChannel = new Channel(channelName, channelPassword);
 
-            server.addChannel(newChannel);
-            //channelToJoin->addOperator(client); // Ajoute le createur du channel en tant que operateur.
-            client->joinChannel(server, newChannel, channelPassword);
+            if (newChannel != NULL)
+            {
+                server.addChannel(newChannel);
+                newChannel->addOperator(client); // Ajoute le createur du channel en tant que operateur.
+                client->joinChannel(server, newChannel, channelPassword);
+            }
         }
     }
 }
diff --git a/commands/nick.cpp b/commands/nick.cpp
index b85070a..d1ce39c 100644
--- a/commands/nick.cpp
+++ b/commands/nick.cpp
@@ -19,7 +19,7 @@ void exec_NICK(Server &server, std::vector<std::string> &arguments, int clientFd
     std::string nickname;
     Client      *client;
 
-    std::vector<Client> &allClients = server.getVectorClient();
+    std::vector<Client *> &allClients = server.getVectorClient();
 
     client = server.getClientStruct(clientFd);
     if (client == NULL)
@@ -49,7 +49,7 @@ void exec_NICK(Server &server, std::vector<std::string> &arguments, int clientFd
 
     for (size_t i = 0; i < allClients.size(); i++) // Regarde si n'y a pas deja quelqu'un avec ce pseudo sur le server.
     {
-        if (nickname == allClients[i].getNickname())
+        if (nickname == allClients[i]->getNickname())
         {
             if (client->getNickname() == "") // Cas particulier au register seulement, on envoie '*' car le client n'a pas encore de pseudo. Sinon la client renvoie une commande etrange.
             {
diff --git a/includes/Client.hpp b/includes/Client.hpp
index ed0a31e..a03092b 100644
--- a/includes/Client.hpp
+++ b/includes/Client.hpp
@@ -54,7 +54,7 @@ class Client
         void        addToClientSendBuffer(std::string &string); // Ajoute string au _clientSendBuffer;
 
         void        joinChannel(Server &server, Channel *channel, std::string channelPassword); // Rejoint le channel.
-        void        leaveChannel(Channel &channel); //Quitte un channel
+        void        leaveChannel(Channel *channel); //Quitte un channel
         void        leaveAllChannels(); //Quitte tout les channels.
 
     private:
diff --git a/includes/Server.hpp b/includes/Server.hpp
index 7f01423..17b921d 100644
--- a/includes/Server.hpp
+++ b/includes/Server.hpp
@@ -68,13 +68,14 @@ class Server
 
         void                    deleteClient(int idx); //Remove from poll allSockets.
         void                    closeAllFds(void); // Close all fds.
-        void                    deleteChannels(void);
+        void                    deleteAllChannels(void);
+        void                    deleteAllClients(void);
 
         int                     getServerSocket(void); // Retourne le socket du server.
         Client*                 getClientStruct(int clientFd);
         pollfd*                 getClientPoll(int clientFd);
         std::string             getServerPassword(void); // Retourne le mot de passe du serveur.
-        std::vector<Client>&    getVectorClient(void); // Retourne le vecteur de client.
+        std::vector<Client *>&    getVectorClient(void); // Retourne le vecteur de client.
 
         void                    handleMessage(char *buffer, int clientFd);
         void                    handleCommand(std::string &command, int clientFd);
@@ -126,7 +127,7 @@ class Server
         int                        _serverSocket;
         sockaddr_in                _serverAddress;
         std::vector<pollfd>        _allSockets;
-        std::vector<Client>        _allClients;
+        std::vector<Client *>      _allClients;
         std::vector<Channel *>     _Channels;
 
        Server(); //Default Constructor.
diff --git a/main.cpp b/main.cpp
index f090571..ea68e15 100644
--- a/main.cpp
+++ b/main.cpp
@@ -32,11 +32,14 @@ int main(void)
 
         server.serverInit();
         server.startServerRoutine();
+        server.deleteAllClients();
+        server.deleteAllChannels();
         server.closeAllFds();
-        server.deleteChannels();
     }
     catch (const std::exception &e)
     {
+        server.deleteAllClients();
+        server.deleteAllChannels();
         server.closeAllFds();
         std::cerr << e.what() << std::endl;
     }
